/**
 * Front Office API
 * # Front Office The front office is typically used within front-end apps, for example a website or a mobile application. With this SDK, you can handle interactions with documents and request a list of personalized documents.  ## User Each method requires a `user_id`. From our perspective, a `user_id` is simply required to group interactions together. We don't need to know who that user is, so it is preferred to create this `user_id` in a privacy-preserving way. For example, create a hash method which transforms your user into an ID hash.  ## Document A document here is represented by its `id` and optional `properties`. In order to display a document in an interface, it's preferred to use `properties`, which is an arbitrary collection of values. For example, it could contain an image url, a full article url, the publication date, the author or much more. The properties that were added when the document was submitted to us, are just mirrored here.  ## Auth The API requires an authenticationToken when used. Please see further down in this README.md file, or refer to the test included in this SDK's codebase, on how to set this token correctly. \\
 *
 * The version of the OpenAPI document: 1.0.0-rc10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HistoryEntry from './HistoryEntry';

/**
 * The InputUserWithHistory model module.
 * @module model/InputUserWithHistory
 * @version 1.0.25
 */
class InputUserWithHistory {
    /**
     * Constructs a new <code>InputUserWithHistory</code>.
     * @alias module:model/InputUserWithHistory
     */
    constructor() { 
        
        InputUserWithHistory.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InputUserWithHistory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InputUserWithHistory} obj Optional instance to populate.
     * @return {module:model/InputUserWithHistory} The populated <code>InputUserWithHistory</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InputUserWithHistory();

            if (data.hasOwnProperty('history')) {
                obj['history'] = ApiClient.convertToType(data['history'], [HistoryEntry]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InputUserWithHistory</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InputUserWithHistory</code>.
     */
    static validateJSON(data) {
        if (data['history']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['history'])) {
                throw new Error("Expected the field `history` to be an array in the JSON data but got " + data['history']);
            }
            // validate the optional field `history` (array)
            for (const item of data['history']) {
                HistoryEntry.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The history is an sequence of entries representing documents visited by the user.  It is ordered from the  \"oldest\" interaction at index 0 to the \"newest\" interaction at the highest index.  History entries do not need to have a timestamp, if no timestamp is given it is approximated in some way based on timestamps of neighboring documents and if non have a timestamp they are all assumed to have happened \"just now\" for simplicity.
 * @member {Array.<module:model/HistoryEntry>} history
 */
InputUserWithHistory.prototype['history'] = undefined;






export default InputUserWithHistory;

