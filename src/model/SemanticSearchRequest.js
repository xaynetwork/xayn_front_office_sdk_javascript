/**
 * Front Office API
 * # Front Office The front office is typically used within front-end apps, for example a website or a mobile application. With this SDK, you can handle interactions with documents and request a list of personalized documents.  ## User Each method requires a `user_id`. From our perspective, a `user_id` is simply required to group interactions together. We don't need to know who that user is, so it is preferred to create this `user_id` in a privacy-preserving way. For example, create a hash method which transforms your user into an ID hash.  ## Document A document here is represented by its `id` and optional `properties`. In order to display a document in an interface, it's preferred to use `properties`, which is an arbitrary collection of values. For example, it could contain an image url, a full article url, the publication date, the author or much more. The properties that were added when the document was submitted to us, are just mirrored here.  ## Auth The API requires an authenticationToken when used. Please see further down in this README.md file, or refer to the test included in this SDK's codebase, on how to set this token correctly. \\
 *
 * The version of the OpenAPI document: 1.0.0-rc10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SemanticSearchRequestPersonalize from './SemanticSearchRequestPersonalize';

/**
 * The SemanticSearchRequest model module.
 * @module model/SemanticSearchRequest
 * @version 1.0.26
 */
class SemanticSearchRequest {
    /**
     * Constructs a new <code>SemanticSearchRequest</code>.
     * @alias module:model/SemanticSearchRequest
     * @param documentId {String} An id can be any non-empty string that consist of digits, latin letters, underscores, colons, minus signs, at signs, and dots.
     */
    constructor(documentId) { 
        
        SemanticSearchRequest.initialize(this, documentId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, documentId) { 
        obj['document_id'] = documentId;
    }

    /**
     * Constructs a <code>SemanticSearchRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SemanticSearchRequest} obj Optional instance to populate.
     * @return {module:model/SemanticSearchRequest} The populated <code>SemanticSearchRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SemanticSearchRequest();

            if (data.hasOwnProperty('document_id')) {
                obj['document_id'] = ApiClient.convertToType(data['document_id'], 'String');
            }
            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('published_after')) {
                obj['published_after'] = ApiClient.convertToType(data['published_after'], 'Date');
            }
            if (data.hasOwnProperty('min_similarity')) {
                obj['min_similarity'] = ApiClient.convertToType(data['min_similarity'], 'Number');
            }
            if (data.hasOwnProperty('personalize')) {
                obj['personalize'] = SemanticSearchRequestPersonalize.constructFromObject(data['personalize']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SemanticSearchRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SemanticSearchRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SemanticSearchRequest.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['document_id'] && !(typeof data['document_id'] === 'string' || data['document_id'] instanceof String)) {
            throw new Error("Expected the field `document_id` to be a primitive type in the JSON string but got " + data['document_id']);
        }
        // validate the optional field `personalize`
        if (data['personalize']) { // data not null
          SemanticSearchRequestPersonalize.validateJSON(data['personalize']);
        }

        return true;
    }


}

SemanticSearchRequest.RequiredProperties = ["document_id"];

/**
 * An id can be any non-empty string that consist of digits, latin letters, underscores, colons, minus signs, at signs, and dots.
 * @member {String} document_id
 */
SemanticSearchRequest.prototype['document_id'] = undefined;

/**
 * @member {Number} count
 * @default 10
 */
SemanticSearchRequest.prototype['count'] = 10;

/**
 * A RFC3339 compatible date-time  - can be in the future - will be converted to and then stored as UTC - sub-second resolution is not guaranteed. - while `properties.publication_date` is in the future the document will not be   returned for personalized documents, once it is no longer in the future it will   automatically be considered for personalization from then on 
 * @member {Date} published_after
 */
SemanticSearchRequest.prototype['published_after'] = undefined;

/**
 * Minimal similarity of a document to consider it as search candidate.
 * @member {Number} min_similarity
 * @default 0
 */
SemanticSearchRequest.prototype['min_similarity'] = 0;

/**
 * @member {module:model/SemanticSearchRequestPersonalize} personalize
 */
SemanticSearchRequest.prototype['personalize'] = undefined;






export default SemanticSearchRequest;

