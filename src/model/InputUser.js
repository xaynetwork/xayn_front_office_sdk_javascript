/**
 * Front Office API
 * # Front Office The front office is typically used within front-end apps, for example a website or a mobile application. With this SDK, you can handle interactions with documents and request a list of personalized documents.  ## User Each method requires a `user_id`. From our perspective, a `user_id` is simply required to group interactions together. We don't need to know who that user is, so it is preferred to create this `user_id` in a privacy-preserving way. For example, create a hash method which transforms your user into an ID hash.  ## Document A document here is represented by its `id` and optional `properties`. In order to display a document in an interface, it's preferred to use `properties`, which is an arbitrary collection of values. For example, it could contain an image url, a full article url, the publication date, the author or much more. The properties that were added when the document was submitted to us, are just mirrored here.  ## Auth The API requires an authenticationToken when used. Please see further down in this README.md file, or refer to the test included in this SDK's codebase, on how to set this token correctly. \\
 *
 * The version of the OpenAPI document: 1.0.0-rc10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HistoryEntry from './HistoryEntry';
import InputUserById from './InputUserById';
import InputUserWithHistory from './InputUserWithHistory';

/**
 * The InputUser model module.
 * @module model/InputUser
 * @version 1.0.25
 */
class InputUser {
    /**
     * Constructs a new <code>InputUser</code>.
     * Information about a user provided as input for an search  Currently this can either be the users &#x60;id&#x60; oder a users &#x60;history&#x60;. 
     * @alias module:model/InputUser
     * @param {(module:model/InputUserById|module:model/InputUserWithHistory)} instance The actual instance to initialize InputUser.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "InputUserById") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                InputUserById.validateJSON(instance); // throw an exception if no match
                // create InputUserById from JS object
                this.actualInstance = InputUserById.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into InputUserById
            errorMessages.push("Failed to construct InputUserById: " + err)
        }

        try {
            if (typeof instance === "InputUserWithHistory") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                InputUserWithHistory.validateJSON(instance); // throw an exception if no match
                // create InputUserWithHistory from JS object
                this.actualInstance = InputUserWithHistory.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into InputUserWithHistory
            errorMessages.push("Failed to construct InputUserWithHistory: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `InputUser` with oneOf schemas InputUserById, InputUserWithHistory. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `InputUser` with oneOf schemas InputUserById, InputUserWithHistory. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>InputUser</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InputUser} obj Optional instance to populate.
     * @return {module:model/InputUser} The populated <code>InputUser</code> instance.
     */
    static constructFromObject(data, obj) {
        return new InputUser(data);
    }

    /**
     * Gets the actual instance, which can be <code>InputUserById</code>, <code>InputUserWithHistory</code>.
     * @return {(module:model/InputUserById|module:model/InputUserWithHistory)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>InputUserById</code>, <code>InputUserWithHistory</code>.
     * @param {(module:model/InputUserById|module:model/InputUserWithHistory)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = InputUser.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of InputUser from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/InputUser} An instance of InputUser.
     */
    static fromJSON = function(json_string){
        return InputUser.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * An id can be any non-empty string that consist of digits, latin letters, underscores, colons, minus signs, at signs, and dots.
 * @member {String} id
 */
InputUser.prototype['id'] = undefined;

/**
 * The history is an sequence of entries representing documents visited by the user.  It is ordered from the  \"oldest\" interaction at index 0 to the \"newest\" interaction at the highest index.  History entries do not need to have a timestamp, if no timestamp is given it is approximated in some way based on timestamps of neighboring documents and if non have a timestamp they are all assumed to have happened \"just now\" for simplicity.
 * @member {Array.<module:model/HistoryEntry>} history
 */
InputUser.prototype['history'] = undefined;


InputUser.OneOf = ["InputUserById", "InputUserWithHistory"];

export default InputUser;

